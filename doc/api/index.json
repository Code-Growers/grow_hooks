[{"name":"grow_hooks","qualifiedName":"grow_hooks","href":"grow_hooks/grow_hooks-library.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":""},{"name":"useDisposableRef","qualifiedName":"grow_hooks.useDisposableRef","href":"grow_hooks/useDisposableRef.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Allows to call any cleanup/dispose functions on Singletons saved inside of useRef hook.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useFormField","qualifiedName":"grow_hooks.useFormField","href":"grow_hooks/useFormField.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Simple Record wrapper around useFocusNode and useTextEditingController hooks.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useHapticFeedback","qualifiedName":"grow_hooks.useHapticFeedback","href":"grow_hooks/useHapticFeedback.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Wrapper hook around haptic_feedback library.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useNavigatorPop","qualifiedName":"grow_hooks.useNavigatorPop","href":"grow_hooks/useNavigatorPop.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Simple wrapper around Navigator.of(context).pop(); with generic return type support","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useOnMount","qualifiedName":"grow_hooks.useOnMount","href":"grow_hooks/useOnMount.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Calls a provided callback after widget mounts into widget tree.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useOnPostFrameMount","qualifiedName":"grow_hooks.useOnPostFrameMount","href":"grow_hooks/useOnPostFrameMount.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Calls a provided callback after widget mounts into widget tree.\nDifference between useOnMount is that provided callback is wrapped inside addPostFrameCallback callback","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useOnUnmount","qualifiedName":"grow_hooks.useOnUnmount","href":"grow_hooks/useOnUnmount.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Calls a provided callback before widget is unmounted from widget tree.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"usePeriodicRerender","qualifiedName":"grow_hooks.usePeriodicRerender","href":"grow_hooks/usePeriodicRerender.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Periodically rerenders widget by internally incrementing useState value.\nNote that duration value can't be changed during the lifecycle of this hook.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"usePostFrameEffect","qualifiedName":"grow_hooks.usePostFrameEffect","href":"grow_hooks/usePostFrameEffect.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Simple wrapper around useEffect hook. The only difference that inner callback is wrapped inside addPostFrameCallback.\nNote that since we are wrapping our callback inside addPostFrameCallback, there is no cleanup function support.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useRefValue","qualifiedName":"grow_hooks.useRefValue","href":"grow_hooks/useRefValue.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Simple wrapper around useRef, but emitting value instead of ObjectRef.\nUse this in case you want a singleton instance of some class or other data structur.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useRerender","qualifiedName":"grow_hooks.useRerender","href":"grow_hooks/useRerender.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Forces widget rerender by internally incrementing useState value.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useSyncedRef","qualifiedName":"grow_hooks.useSyncedRef","href":"grow_hooks/useSyncedRef.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Automatically synchronizes changing value into useRef hook.\nUsefull in case you want to save some derived data inside of useRef, keeping previous value, etc..","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useValueChangedCallback","qualifiedName":"grow_hooks.useValueChangedCallback","href":"grow_hooks/useValueChangedCallback.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Automatically calls a provided void callback when value changes.\nCallback is not fired during the initial render.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}},{"name":"useValueChangedHapticFeedback","qualifiedName":"grow_hooks.useValueChangedHapticFeedback","href":"grow_hooks/useValueChangedHapticFeedback.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Wrapper hook around haptic_feedback library. Provides a haptic feedback anytime provided value changes.\nDoesn't get called on initial render.","enclosedBy":{"name":"grow_hooks","kind":9,"href":"grow_hooks/grow_hooks-library.html"}}]
